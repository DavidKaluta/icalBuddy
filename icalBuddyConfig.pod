=head1 NAME

B<icalBuddyConfig> -- documentation for the icalBuddy configuration file


=head1 SYNOPSIS

The icalBuddy configuration file should be saved in F<~/.icalBuddyConfig.plist> and is thus per-user. The contents of this file are expected to be a valid property list, so it's recommended that you use the Property List Editor application distributed with the OS X Developer Tools to edit it. If you want to edit this file manually, please consult the plist(5) and plutil(1) man pages. The example at the end of this man page might also be of help.



=head1 DESCRIPTION


=head2 Opening the Configuration File for Editing Using icalBuddy

icalBuddy offers convenience arguments for quickly opening the configuration file for editing (and automatically creating it if it doesn't exist.) Run:

	icalBuddy editConfig

to open the configuration file in a GUI editor (the Property List Editor application, or if you don't have that (it's installed as part of the OS X Developer Tools package,) whichever application is associated with the property list file type) or:

	icalBuddy editConfigCLI

to open it in a command-line editor (either the app that your C<EDITOR> environment variable points to or one of these standard editors (whichever is found first:) vim, vi, nano, pico, emacs, ed.)


=head2 Structure of the Configuration File

The root object of the configuration file should be a dictionary. This dictionary may have the following keys:

=over 16

=item B<C<constantArguments>>

This key can be used to set constant values for any of icalBuddy's arguments (see the icalBuddy(1) man page for documentation for the arguments,) i.e. argument values that will always be set when you run icalBuddy. Using this key will save you the trouble of always having to explicitly specify some arguments when running icalBuddy. The value for this key should be another dictionary, and the keys in this dictionary should be the long names of arguments (as specified in the icalBuddy(1) man page.) The types of the values set for each argument key depend on the kind of argument: for arguments that require a textual value to be specified the type should be a String, for arguments that require a numeric value the type should be a Number and for arguments that require no value at all (i.e. if on the command line you would simply set the argument but no value after it) the type should be a Boolean. So for example if you would like to set the C<-f> (or C<--formatOutput>) argument to always true, you would add the key C<formatOutput> with the Boolean value C<true> into the C<constantArguments> dictionary.

=item B<C<formatting>>

Specifies the visual formatting for different elements in the output when using ANSI escape sequences formatting (i.e. when the C<-f> or C<--formatOutput> argument is set.) The value for this key should be another dictionary with any of the keys listed below, with their values corresponding to the syntax described in section B<Formatting Parameters> further below. If some of these keys are missing in the configuration file, the default formatting will be used for them. The settings in this dictionary will only be used if the C<-f> or C<--formatOutput> argument is set when running icalBuddy.

=over 25

=item B<C<sectionTitle>>

The title of a section and the section separator

=item B<C<bullet>>

The normal bullet point

=item B<C<alertBullet>>

The "alert" bullet point

=item B<C<firstItemLine>>

The first full line printed for an item (an event or a task)

=item B<C<datetimeName>>

The name of the datetime property

=item B<C<datetimeValue>>

A value for the datetime property

=item B<C<titleValue>>

The title of an item (an event or a task)

=item B<C<calendarNameInTitle>>

The calendar name, when printed along with an item's title

=item B<C<notesName>>

The name of the notes property

=item B<C<notesValue>>

A value for the notes property

=item B<C<urlName>>

The name of the url property

=item B<C<urlValue>>

A value for the url property

=item B<C<locationName>>

The name of the location property

=item B<C<locationValue>>

A value for the location property

=item B<C<dueDateName>>

The name of the due date property

=item B<C<dueDateValue>>

A value for the due date property

=item B<C<priorityName>>

The name of the priority property

=item B<C<priorityValue>>

A numeric value for the priority property

=item B<C<priorityValueHigh>>

The value "high" for the priority property

=item B<C<priorityValueMedium>>

The value "medium" for the priority property

=item B<C<priorityValueLow>>

The value "low" for the priority property

=item B<C<noItems>>

The text to display under sections (e.g. dates) that have no items (e.g. tasks)

=back


=item B<C<formattedKeywords>>

This key can be used to affect the formatting of all occurrences of any string in the output of icalBuddy. The value for this key should also be a dictionary, its keys the keywords you want formatted in some way and the values corresponding to those keys the parameters that specify the formatting you want. So for example you could specify a more prominent formatting for all instances of the word C<"today"> wherever it may occur in the output by adding formatting parameters (see section B<Formatting Parameters> below for the syntax) as the value for the key "today" in this dictionary. The settings in this dictionary will only be used if the C<-f> or C<--formatOutput> argument is set when running icalBuddy.

=back



=head2 Formatting Parameters

In the B<formatting> and B<formattedKeywords> sections of the configuration file (see section B<Structure of the Configuration File> above) you can specify visual formatting parameters for different parts of the output. For example you could make something blue and bold with a white background by specifying a value like C<"blue, bg:white, bold">. Like in this example, you always need to separate different formatting parameters with commas. The parameters you may use are listed below:

=over 16

=item B<C<black>>

Black foreground color

=item B<C<white>>

White foreground color

=item B<C<red>>

Red foreground color

=item B<C<green>>

Green foreground color

=item B<C<yellow>>

Yellow foreground color

=item B<C<blue>>

Blue foreground color

=item B<C<cyan>>

Cyan foreground color

=item B<C<magenta>>

Magenta foreground color

=item B<C<bright-black>>

Bright black foreground color

=item B<C<bright-white>>

Bright white foreground color

=item B<C<bright-red>>

Bright red foreground color

=item B<C<bright-green>>

Bright green foreground color

=item B<C<bright-yellow>>

Bright yellow foreground color

=item B<C<bright-blue>>

Bright blue foreground color

=item B<C<bright-cyan>>

Bright cyan foreground color

=item B<C<bright-magenta>>

Bright magenta foreground color

=item B<C<calendar-color>>

Same foreground color as the calendar color

=item B<C<bg:black>>

Black background color

=item B<C<bg:white>>

White background color

=item B<C<bg:red>>

Red background color

=item B<C<bg:green>>

Green background color

=item B<C<bg:yellow>>

Yellow background color

=item B<C<bg:blue>>

Blue background color

=item B<C<bg:cyan>>

Cyan background color

=item B<C<bg:magenta>>

Magenta background color

=item B<C<bg:bright-black>>

Bright black background color

=item B<C<bg:bright-white>>

Bright white background color

=item B<C<bg:bright-red>>

Bright red background color

=item B<C<bg:bright-green>>

Bright green background color

=item B<C<bg:bright-yellow>>

Bright yellow background color

=item B<C<bg:bright-blue>>

Bright blue background color

=item B<C<bg:bright-cyan>>

Bright cyan background color

=item B<C<bg:bright-magenta>>

Bright magenta background color

=item B<C<bg:calendar-color>>

Same background color as the calendar color

=item B<C<bold>>

Bold text

=item B<C<underlined>>

Underlined text

=item B<C<double-underlined>>

Double underlined text (note that this is not supported by Apple's Terminal application)

=item B<C<blink>>

Blinking text

=back



=head1 EXAMPLES

	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
	<plist version="1.0">
	<dict>
		<key>constantArguments</key>
		<dict>
			<key>bullet</key>
			<string>- </string>
			<key>alertBullet</key>
			<string>!! </string>
			<key>noCalendarNames</key>
			<true/>
			<key>formatOutput</key>
			<true/>
			<key>includeCals</key>
			<string>Home,Work</string>
		</dict>
		<key>formatting</key>
		<dict>
			<key>datetimeName</key>
			<string>cyan</string>
			<key>datetimeValue</key>
			<string>yellow</string>
			<key>titleValue</key>
			<string>magenta,bg:black</string>
			<key>notesName</key>
			<string>cyan</string>
			<key>notesValue</key>
			<string>white</string>
			<key>urlName</key>
			<string>cyan</string>
			<key>urlValue</key>
			<string>white</string>
			<key>locationName</key>
			<string>cyan</string>
			<key>locationValue</key>
			<string>white</string>
			<key>dueDateName</key>
			<string>cyan</string>
			<key>dueDateValue</key>
			<string>yellow</string>
			<key>priorityName</key>
			<string>cyan</string>
			<key>priorityValue</key>
			<string>black,bg:white</string>
			<key>priorityValueHigh</key>
			<string>red,bg:white</string>
			<key>priorityValueMedium</key>
			<string>yellow,bg:white</string>
			<key>priorityValueLow</key>
			<string>green,bg:white</string>
			<key>sectionTitle</key>
			<string>blue,underlined</string>
			<key>bullet</key>
			<string>white</string>
			<key>alertBullet</key>
			<string>red</string>
			<key>firstItemLine</key>
			<string>bold</string>
		</dict>
		<key>formattedKeywords</key>
		<dict>
			<key>today</key>
			<string>red,bold</string>
		</dict>
	</dict>
	</plist>


=head1 SEE ALSO

icalBuddy(1), plist(5), plutil(1), icalBuddyLocalization(1)

=head1 AUTHORS

This man page has been written by Ali Rantakari (http://hasseg.org)

